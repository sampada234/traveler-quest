//
//  ContentView.swift
//  InteractiveMap

import SwiftUI
import MapKit

extension CLLocationCoordinate2D {
    static let library = CLLocationCoordinate2D(latitude: 42.39,longitude: -72.528)
}

extension MKCoordinateRegion {
    static let amherst = MKCoordinateRegion(
        center: CLLocationCoordinate2D(
            latitude: 42.340,
            longitude: -72.528),
        span: MKCoordinateSpan(
            latitudeDelta: 0.1,
            longitudeDelta: 0.1)
    )
    static let umass = MKCoordinateRegion(
        center: CLLocationCoordinate2D(
            latitude: 42.39,
            longitude: -72.528),
        span: MKCoordinateSpan(
            latitudeDelta: 0.01,
            longitudeDelta: 0.01)
    )
}



struct ContentView: View {
    @State private var position: MapCameraPosition = .automatic
    
    @State private var visibleRegion: MKCoordinateRegion?
    
    @State private var searchResults: [MKMapItem] = []
    @State private var selectedResult: MKMapItem?
    @State private var route: MKRoute?
    
    @State var shouldPresentSheet = false
    
    @Environment(\.dismiss) private var dismiss
    
    
    var body: some View {
        
        Map(position:$position, selection: $selectedResult) {
            Annotation("Library", coordinate: .library) {
                ZStack {
                    RoundedRectangle(cornerRadius: 5).fill(.background)
                    RoundedRectangle(cornerRadius: 5).stroke(.secondary, lineWidth: 5)
                    Image(systemName: "building").padding(5)
                }
            }.annotationTitles(.hidden)
            
            ForEach(searchResults, id: \.self) { result in
                Marker(item: result)
            }
            .annotationTitles(.hidden)
            UserAnnotation()
        }
        
        .mapStyle(.hybrid(elevation: .realistic))
        .safeAreaInset(edge: .bottom) {
            HStack {
                Spacer()
                BeantownButtons(position: $position, searchResults: $searchResults, visibleRegion: visibleRegion)
                    .padding(.top)
                Spacer()
            }
            .background(.thinMaterial)
        }
        .onChange(of: searchResults) {
            position = .automatic
        }
        .onChange(of: selectedResult) {
            getDirections()
        }
        .onMapCameraChange { context in
            visibleRegion = context.region
        }
        .mapControls {
        MapUserLocationButton()
        MapCompass()
        MapScaleView()
        }
        
        Spacer()
    }
   
    func getDirections() {
            route = nil
            
            // Check if there is a selected result
            guard let selectedResult else { return }
    
            
            // Create and configure the request
            let request = MKDirections.Request()
            request.source = MKMapItem(placemark: MKPlacemark(coordinate: .library))
            request.destination = self.selectedResult
            
            // Get the directions based on the request
            Task {
                let directions = MKDirections(request: request)
                let response = try? await directions.calculate()
                route = response?.routes.first
            }
        }
        
        
     /*
       Button {
            shouldPresentSheet.toggle()
        } label: {
            Label("Stats", systemImage: "pencil.and.list.clipboard")
        }
        .buttonStyle(.borderedProminent)
        .sheet(isPresented: $shouldPresentSheet) {
                    print("Sheet dismissed!")
                } content: {
                    Text("Player Statistics")
                        .font(.title)
                        .padding(.top, 20)
                            Spacer()
                        }
        
*/
            
    }

        

#Preview {
    ContentView()
}
