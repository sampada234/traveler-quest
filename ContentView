import SwiftUI
import MapKit

extension CLLocationCoordinate2D {
    static let library = CLLocationCoordinate2D(latitude: 42.39,longitude: -72.528)
}

extension MKCoordinateRegion {
    static let amherst = MKCoordinateRegion(
        center: CLLocationCoordinate2D(
            latitude: 42.340,
            longitude: -72.528),
        span: MKCoordinateSpan(
            latitudeDelta: 0.1,
            longitudeDelta: 0.1)
    )
    static let umass = MKCoordinateRegion(
        center: CLLocationCoordinate2D(
            latitude: 42.39,
            longitude: -72.528),
        span: MKCoordinateSpan(
            latitudeDelta: 0.01,
            longitudeDelta: 0.01)
    )
}

struct ContentView: View {
    @State private var position: MapCameraPosition = .automatic
    @State private var visibleRegion: MKCoordinateRegion?
    @State private var searchResults: [MKMapItem] = []
    @State private var selectedResult: MKMapItem?
    @State private var route: MKRoute?
    @State private var shouldPresentSheet = false
    @State private var showLogo: Bool = true // Track logo visibility
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
      
        if showLogo {
            Image("logo") // Use your PNG file name here
                .resizable()
            //.scaledToFit()
            .frame(height: 900)
                .opacity(showLogo ? 1 : 0) // Control opacity for fading effect
                .onAppear {
                    // Animate the logo fading out after a delay
                    withAnimation(.easeOut(duration: 5).delay(2)) {
                        showLogo = false
                    }
                }
        }
        
    
        ZStack {
            // Map View
            Map(position: $position, selection: $selectedResult) {
                Annotation("Library", coordinate: .library) {
                    ZStack {
                        RoundedRectangle(cornerRadius: 5).fill(.background)
                        RoundedRectangle(cornerRadius: 5).stroke(.secondary, lineWidth: 5)
                        Image(systemName: "building").padding(5)
                    }
                }
                .annotationTitles(.hidden)
                
                ForEach(searchResults, id: \.self) { result in
                    Marker(item: result)
                }
                .annotationTitles(.hidden)
                
                UserAnnotation()
            }
            .mapStyle(.hybrid(elevation: .realistic))
            .safeAreaInset(edge: .bottom) {
                HStack {
                    Spacer()
                    BeantownButtons(position: $position, searchResults: $searchResults, visibleRegion: visibleRegion)
                        .padding(.top)
                    Spacer()
                }
                .background(.thinMaterial)
            }
            .onChange(of: searchResults) {
                position = .automatic
            }
            .onChange(of: selectedResult) {
                getDirections()
            }
            .onMapCameraChange { context in
                visibleRegion = context.region
            }
            .mapControls {
                MapUserLocationButton()
                MapCompass()
                MapScaleView()
            }
            
        }
        
        .onAppear {
            // Reset any states if needed when the view first appears
        }
        .onChange(of: searchResults) {
            position = .automatic
        }
        .onChange(of: selectedResult) {
            getDirections()
        }
        
    }
    
    func getDirections() {
        route = nil
        
        guard let selectedResult else { return }
        
        let request = MKDirections.Request()
        request.source = MKMapItem(placemark: MKPlacemark(coordinate: .library))
        request.destination = self.selectedResult
        
        Task {
            let directions = MKDirections(request: request)
            let response = try? await directions.calculate()
            route = response?.routes.first
        }
    }
}

#Preview {
    ContentView()
}
